{"version":3,"file":"index.js","sources":["../../../cep.config.ts","../../../src/shared/shared.ts","../../../src/jsx/aeft/utils.ts","../../../src/jsx/aeft/animate.ts","../../../src/jsx/aeft/aeft.ts","../../../src/jsx/index.ts"],"sourcesContent":["import { CEP_Config } from \"vite-cep-plugin\";\nimport { version } from \"./package.json\";\n\n\nconst config: CEP_Config = {\n  version,\n  id: \"com.toona.nigiri\",\n  displayName: \"Nigiri\",\n  symlink: \"local\",\n  port: 3000,\n  servePort: 5000,\n  startingDebugPort: 8860,\n  extensionManifestVersion: 6.0,\n  requiredRuntimeVersion: 9.0,\n  hosts: [\n    { name: \"AEFT\", version: \"[0.0,99.9]\" }\n  ],\n  type: \"Panel\",\n  iconDarkNormal: \"./src/assets/light-icon.png\",\n  iconNormal: \"./src/assets/dark-icon.png\",\n  iconDarkNormalRollOver: \"./src/assets/light-icon.png\",\n  iconNormalRollOver: \"./src/assets/dark-icon.png\",\n  parameters: [\"--v=0\", \"--enable-nodejs\", \"--mixed-context\"],\n  width: 500,\n  height: 550,\n\n  panels: [\n    {\n      mainPath: \"./main/index.html\",\n      name: \"main\",\n      panelDisplayName: \"Nigiri\",\n      autoVisible: true,\n      width: 600,\n      height: 650,\n    },\n\n  ],\n  build: {\n    jsxBin: \"off\",\n    sourceMap: true,\n  },\n  zxp: {\n    country: \"US\",\n    province: \"CA\",\n    org: \"MyCompany\",\n    password: \"mypassword\",\n    tsa: \"http://timestamp.digicert.com/\",\n    sourceMap: false,\n    jsxBin: \"off\",\n  },\n  installModules: [],\n  copyAssets: [],\n  copyZipAssets: [],\n};\nexport default config;\n","import config from \"../../cep.config\";\r\nexport const ns = config.id;\r\n","export const sortLayers = (\n  comp: CompItem,\n  layerArray: any[],\n  parentFold: FolderItem\n) => {\n  let layers = [];\n  let newComp = app.project.items.addComp(\"internal\", 1080, 1920, 1, 15, 24);\n  newComp.parentFolder = parentFold;\n  for (let i = 1; i <= comp.numLayers; i++) {\n    let currLayer = comp.layer(i);\n    if (!(currLayer instanceof AVLayer)) continue;\n    let newLayer = newComp.layers.add(currLayer.source);\n    centerLayerPosition(newLayer, newComp);\n    let layerObj = {\n      name: comp.layer(i).name,\n      index: i,\n      layer: comp.layer(i),\n      count: layerArray[i - 1].count,\n      in: layerArray[i - 1].in,\n      out: layerArray[i - 1].out,\n      prev: layerArray[i - 1].prev,\n    };\n    layers.push(layerObj);\n  }\n  layers.sort((a, b) => {\n    if (parseInt(a.name) < parseInt(b.name)) {\n      return -1;\n    }\n    if (parseInt(a.name) > parseInt(b.name)) {\n      return 1;\n    }\n    return 0;\n  });\n  return layers;\n};\n\nexport const centerLayerPosition = (currLayer: AVLayer, comp: CompItem) => {\n  let layerPos = currLayer.property(\"Position\");\n  let layerScale = currLayer.property(\"Scale\");\n  if (!(layerPos instanceof Property)) return;\n  if (!(layerScale instanceof Property)) return;\n  layerPos.setValue([540, 960]);\n  let scaleFactorY = 100;\n  let scaleFactorX = 100;\n  if (currLayer.height > comp.height) {\n    scaleFactorY = (comp.height / currLayer.height) * 100;\n  }\n  if (currLayer.width > comp.width) {\n    scaleFactorX = (comp.width / currLayer.width) * 100;\n  }\n  let scaleFactor = Math.min(scaleFactorX, scaleFactorY);\n  layerScale.setValue([scaleFactor, scaleFactor]);\n};\n\n// ALERT EASE VALUES\nconst alertEaseValues = (comp: CompItem) => {\n  let layerPos = comp.selectedLayers[0].property(\"Position\");\n  if (layerPos instanceof Property) {\n    for (let j = 1; j <= layerPos.numKeys; j++) {\n      for (let i = 0; i < layerPos.keyInTemporalEase(1).length; i++) {\n        alert(\n          j +\n            \" Ease In: \" +\n            layerPos.keyInTemporalEase(j)[i].influence +\n            \" \" +\n            layerPos.keyInTemporalEase(j)[i].speed\n        );\n      }\n    }\n\n    for (let j = 1; j <= layerPos.numKeys; j++) {\n      for (let i = 0; i < layerPos.keyOutTemporalEase(1).length; i++) {\n        alert(\n          j +\n            \" Ease Out: \" +\n            layerPos.keyOutTemporalEase(j)[i].influence +\n            \" \" +\n            layerPos.keyOutTemporalEase(j)[i].speed\n        );\n      }\n    }\n  }\n};\n","const layerEaseValues = [\n  new KeyframeEase(0, 83.5),\n  new KeyframeEase(0, 0.1),\n  new KeyframeEase(11.5, 83.5),\n  new KeyframeEase(0, 0.1),\n];\n\nexport const animateLayer = (\n  currLayer: AVLayer,\n  slide: number, // current slide, e.g 7_1, 7_2, 7_3\n  index: number, // current layer index, e.g 0, 1, 2\n  layerArray: any[]\n) => {\n  if (slide === index) {\n    animateLayerIn(currLayer, layerArray, index, slide);\n  } else if (slide == index + 1) {\n    animateLayerOut(currLayer, layerArray, index, slide);\n  } else {\n    let layerPos = currLayer.property(\"Position\");\n    if (!(layerPos instanceof Property)) return;\n    layerPos.setValue([\n      540,\n      (currLayer.height * (currLayer.scale.value[1] / 100)) / 2,\n    ]);\n  }\n};\n\nconst animateLayerIn = (\n  currLayer: AVLayer,\n  layerArray: any[],\n  index: number,\n  slide: number\n) => {\n  let layerPos = currLayer.property(\"Position\");\n  let layerOpacity = currLayer.property(\"Opacity\");\n  let layerScale = currLayer.property(\"Scale\");\n  let prevLayer = layerArray[index - 1].layer;\n\n  if (!(prevLayer instanceof AVLayer)) return;\n  if (!(layerPos instanceof Property)) return;\n  if (!(layerOpacity instanceof Property)) return;\n  if (!(layerScale instanceof Property)) return;\n\n  layerScale.setValueAtTime(2, [\n    currLayer.scale.value[0],\n    currLayer.scale.value[0],\n  ]);\n\n  alert(\n    (prevLayer.height * (prevLayer.scale.value[1] / 100)) / 2 + \" prev \" + index\n  );\n  layerPos.setValueAtTime(0, [540, 1920]);\n  layerPos.setValueAtTime(2, [\n    540,\n    (prevLayer.height * (prevLayer.scale.value[1] / 100)) / 2,\n  ]);\n\n  // currLayer.height * (currLayer.scale.value[1] / 100);\n\n  // Set the ease to be a smooth bezier.\n  layerPos.setTemporalEaseAtKey(1, [layerEaseValues[0]], [layerEaseValues[1]]);\n  layerPos.setTemporalEaseAtKey(2, [layerEaseValues[2]], [layerEaseValues[3]]);\n\n  layerOpacity.setValueAtTime(0, 0);\n  layerOpacity.setValueAtTime(1, 100);\n};\n\nconst animateLayerOut = (\n  currLayer: AVLayer,\n  layerArray: any[],\n  index: number,\n  slide: number\n) => {\n  let layerPos = currLayer.property(\"Position\");\n  let layerOpacity = currLayer.property(\"Opacity\");\n  let layerScale = currLayer.property(\"Scale\");\n\n  if (!(layerPos instanceof Property)) return;\n  if (!(layerOpacity instanceof Property)) return;\n  if (!(layerScale instanceof Property)) return;\n\n  alert(\n    (currLayer.height * (currLayer.scale.value[1] / 100)) / 2 + \" curr \" + index\n  );\n  layerPos.setValueAtTime(0, [540, 960]);\n  layerPos.setValueAtTime(2, [\n    540,\n    (currLayer.height * (currLayer.scale.value[1] / 100)) / 2,\n  ]);\n  // layerPos.setValueAtTime(2, [\n  //   540,\n  //   (currLayer.height * (currLayer.scale.value[1] / 100)) / 2,\n  // ]);\n  // Set the ease to be a smooth bezier.\n  layerPos.setTemporalEaseAtKey(1, [layerEaseValues[0]], [layerEaseValues[1]]);\n  layerPos.setTemporalEaseAtKey(2, [layerEaseValues[2]], [layerEaseValues[3]]);\n};\n","import { sortLayers, centerLayerPosition } from \"./utils\";\nimport { animateLayer } from \"./animate\";\n\ntype LayerObj = {\n  name: string;\n  index: number;\n  count: number;\n  in: string;\n  out: string;\n  prev: string;\n};\n\nexport const animatePhotoshop = (layerArray: LayerObj[]) => {\n  app.beginUndoGroup(\"Split Comp\");\n  let comp = app.project.activeItem;\n  if (!(comp instanceof CompItem)) return;\n  let newFolder = app.project.items.addFolder(\"Page_\" + comp.name);\n  if (layerArray.length == 0) layerArray = getPanels();\n  let layers = sortLayers(comp, layerArray, newFolder);\n  let currentCount = 1;\n  for (let i = 0; i < layers.length; i++) {\n    for (let k = 0; k < layerArray[i].count; k++) {\n      let newComp = app.project.items.addComp(\n        comp.name + \"_\" + currentCount,\n        1080,\n        1920,\n        1,\n        15,\n        24\n      );\n      newComp.parentFolder = newFolder;\n      newComp.layers.addSolid([255, 255, 255], \"Background\", 1080, 1920, 1);\n      for (let j = 0; j <= i; j++) {\n        let currentLayer = layers[j].layer;\n        if (!(currentLayer instanceof AVLayer)) continue;\n        let newLayer = newComp.layers.add(currentLayer.source);\n        if (i != 0 && k == 0) animateLayer(newLayer, i, j, layerArray);\n      }\n      currentCount++;\n    }\n  }\n  app.endUndoGroup();\n  return;\n};\n\nexport const getPanels = (): LayerObj[] => {\n  let comp = app.project.activeItem;\n  if (!(comp instanceof CompItem)) return [];\n  let layers = [];\n  for (let i = 1; i <= comp.numLayers; i++) {\n    let layerObj = {\n      name: comp.layer(i).name,\n      index: i,\n      count: 1,\n      in: \"down\",\n      out: \"up\",\n      prev: \"flush\",\n    };\n    layers.push(layerObj);\n  }\n  return layers;\n};\n\nexport const updateValues = () => {\n  app.beginUndoGroup(\"Update Values\");\n  let comp = app.project.activeItem;\n  if (!(comp instanceof CompItem)) return;\n  let layers = [];\n  for (let i = 1; i <= comp.numLayers; i++) {\n    let layerObj = {\n      name: comp.layer(i).name,\n      index: i,\n      layer: comp.layer(i),\n    };\n    layers.push(layerObj);\n  }\n\n  const parentFolder = comp.parentFolder;\n  let pastCurrentComp = false;\n  for (let i = 1; i <= parentFolder.numItems; i++) {\n    if (pastCurrentComp) {\n      let currentComp = parentFolder.item(i);\n      if (!(currentComp instanceof CompItem)) continue;\n      for (let j = 1; j <= currentComp.numLayers; j++) {\n        let currentLayer = currentComp.layer(j);\n        for (let k = 0; k < layers.length; k++) {\n          if (layers[k].name == currentLayer.name) {\n            let currLayerPos = currentLayer.property(\"Position\");\n            let oldLayerPos = layers[k].layer.property(\"Position\");\n            let currLayerScale = currentLayer.property(\"Scale\");\n            let oldLayerScale = layers[k].layer.property(\"Scale\");\n            let currLayerOpacity = currentLayer.property(\"Opacity\");\n            let oldLayerOpacity = layers[k].layer.property(\"Opacity\");\n            if (!(currLayerOpacity instanceof Property)) continue;\n            if (!(oldLayerOpacity instanceof Property)) continue;\n            if (!(currLayerPos instanceof Property)) continue;\n            if (!(oldLayerPos instanceof Property)) continue;\n            if (!(currLayerScale instanceof Property)) continue;\n            if (!(oldLayerScale instanceof Property)) continue;\n            let parentLayer = layers[k].layer.parent;\n            let actualPosition = oldLayerPos.valueAtTime(15, true);\n            if (parentLayer) {\n              var childPosition = layers[k].layer.transform.position.value;\n              var parentPosition = parentLayer.transform.position.value;\n              actualPosition = [\n                childPosition[0] + parentPosition[0],\n                childPosition[1] + parentPosition[1],\n              ];\n            }\n            currLayerPos.setValueAtTime(0, actualPosition);\n            currLayerPos.setValueAtTime(2, actualPosition);\n            currLayerScale.setValueAtTime(\n              0,\n              oldLayerScale.valueAtTime(15, false)\n            );\n            currLayerOpacity.setValueAtTime(\n              0,\n              oldLayerOpacity.valueAtTime(15, false)\n            );\n          }\n        }\n      }\n    }\n    if (parentFolder.item(i) == comp) {\n      pastCurrentComp = true;\n    }\n  }\n  app.endUndoGroup();\n};\n","// @include './lib/json2.js'\n\nimport { ns } from \"../shared/shared\";\n\nimport * as aeft from \"./aeft/aeft\";\n\n//@ts-ignore\nconst host = typeof $ !== \"undefined\" ? $ : window;\n\nswitch (BridgeTalk.appName as ApplicationName) {\n  case \"aftereffects\":\n  case \"aftereffectsbeta\":\n    host[ns] = aeft;\n    break;\n}\n\nexport type Scripts = typeof aeft\n\n// https://extendscript.docsforadobe.dev/interapplication-communication/bridgetalk-class.html?highlight=bridgetalk#appname\ntype ApplicationName =\n  | \"aftereffects\"\n  | \"aftereffectsbeta\"\n  | \"ame\"\n  | \"amebeta\"\n  | \"audition\"\n  | \"auditionbeta\"\n  | \"bridge\"\n  | \"bridgebeta\"\n  // | \"flash\"\n  | \"illustrator\"\n  | \"illustratorbeta\"\n  | \"indesign\"\n  | \"indesignbeta\"\n  // | \"indesignserver\"\n  | \"photoshop\"\n  | \"photoshopbeta\"\n  | \"premierepro\"\n  | \"premiereprobeta\";\n"],"names":["version","id","displayName","symlink","port","servePort","startingDebugPort","extensionManifestVersion","requiredRuntimeVersion","hosts","name","type","iconDarkNormal","iconNormal","iconDarkNormalRollOver","iconNormalRollOver","parameters","width","height","panels","mainPath","panelDisplayName","autoVisible","build","jsxBin","sourceMap","zxp","country","province","org","password","tsa","installModules","copyAssets","copyZipAssets","centerLayerPosition","index","layer","prev","layers","layerPos","layerOpacity","app","currentCount","count","out","currLayerPos","currLayerScale","currLayerOpacity","pastCurrentComp","host"],"mappings":";;AAIA;AACEA;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACIC;AAAcV;AAAsB;AAExCW;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AAEAC;AAEIC;AACAV;AACAW;AACAC;AACAL;AACAC;AACF;AAGFK;AACEC;AACAC;;AAEFC;AACEC;AACAC;AACAC;AACAC;AACAC;AACAN;AACAD;;AAEFQ;AACAC;AACAC;AACF;;ACpDA;;ACDA;;;;AAQE;AACE;AACA;;AAEAC;AACA;;AAEEC;AACAC;;AAEA;;AAEAC;;AAEFC;AACF;AACAA;AACE;AACE;AACF;AACA;AACE;AACF;AACA;AACF;AACA;AACF;AAEA;AACE;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;;AAEA;;;AAGF;;ACpDA;AAOA;;;AAQE;;AAEA;AACE;AACA;;AAKF;AACF;AAEA;AAME;AACA;AACA;;AAGA;AACA;AACA;AACA;;;;;;AAgBA;;AAEA;AACAC;AACAA;AAEAC;AACAA;AACF;AAEA;AAME;AACA;AACA;AAEA;AACA;AACA;;;;AAUA;AACA;AACA;AACA;AACA;AACAD;AACAA;AACF;;ACpFA;AACEE;AACA;AACA;AACA;;;;AAIA;AACE;;;;;AAYI;AACA;;AAEA;AACF;AACAC;AACF;AACF;;AAEA;AACF;AAEA;AACE;AACA;;AAEA;AACE;;AAEEP;AACAQ;AACA;AACAC;AACAP;;AAEFC;AACF;AACA;AACF;AAEA;AACEG;AACA;AACA;;AAEA;AACE;;AAEEN;AACAC;;AAEFE;AACF;AAEA;;AAEA;AACE;AACE;AACA;AACA;AACE;AACA;;AAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACE;;;AAMF;AACAO;AACAA;AACAC;AAIAC;AAIF;AACF;AACF;AACF;;AAEEC;AACF;AACF;;AAEF;;;;;;;;;ACzHA;AAEA;AACE;AACA;AACEC;AACA;AACJ;;AAIA"}